- name: copy init work directory shell script file
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  copy:
    src: ../files/{{item}}
    dest: "/tmp/{{item}}"
  with_items:
    - init_work_dir.sh
  tags:
    - deploy
    - redeploy
    - init-common

- name: execute init work directory shell script
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: sh /tmp/init_work_dir.sh {{home_work_dir}}
  tags:
    - deploy
    - redeploy
    - init-common

- name: copy main shell script files
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  copy:
    src: ../files/{{item}}
    dest: "{{home_work_dir}}"
  with_items:
    - func.sh
    - common.sh
    - deploy.sh
    - init.sh
    - init_common.sh
  tags:
    - deploy
    - redeploy
    - start
    - restart
    - remove-logs
    - init-common

- name: init common shell script
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: /bin/bash init_common.sh --chain-bin-name {{common.chain_bin_name}} --coin-unit {{common.coin_unit}} \
    --admin-name {{common.admin_name}} --explorer-backend-bin-name {{common.explorer_backend_bin_name}} --chain-id {{common.chain_id}} \
    --keyring-dir {{common.keyring_dir}} --keyring-backend {{common.keyring_backend}} --minimum-gas-prices {{common.minimum_gas_prices}}
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - deploy
    - redeploy
    - start
    - restart
    - only-upgrade-chain-bin
    - only-start-stopped-chain-node
    - init-common

- name: mkdir bin dir
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: mkdir -p bin
  args:
    chdir: "{{home_work_dir}}"
  tags:
    - deploy
    - redeploy
    - start
    - restart

- name: copy bin files
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  copy:
    src: "{{chain_bin_file_path}}/{{item}}"
    dest: "{{home_work_dir}}/bin/"
  with_items:
    - "{{ common.chain_bin_name }}"
  tags:
    - deploy
    - redeploy
    - start
    - restart
    - only-upgrade-chain-bin
    - only-start-stopped-chain-node

- name: give executable permissions to chain binary
  when: (not has_root_pwd) and (inventory_hostname in groups[master_group] or groups[slaves_group])
  shell: /bin/bash init.sh
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - deploy
    - redeploy
    - start
    - restart
    - only-upgrade-chain-bin
    - only-start-stopped-chain-node

- name: give executable permissions to chain binary for root user
  when: has_root_pwd and (inventory_hostname in groups[master_group] or groups[slaves_group])
  shell: chmod +x {{item}}
  become_method: sudo
  become: yes
  become_user: root
  with_items:
    - "{{ common.chain_bin_name }}"
  args:
    chdir: "{{home_work_dir}}/bin"
  tags:
    - deploy
    - redeploy
    - start
    - restart
    - only-upgrade-chain-bin
    - only-start-stopped-chain-node

- name: deploy master
  shell: /bin/bash deploy.sh -t redeploy --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }} --admin-amount 0mec && sleep 5
  when: inventory_hostname in groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - deploy
    - redeploy

- name: start master
  shell: /bin/bash deploy.sh -t start-master --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }}
  when: inventory_hostname in groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - start
    - only-start-stopped-chain-node
    - fast-start

- name: restart master
  shell: /bin/bash deploy.sh -t restart --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }}
  when: inventory_hostname in groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - restart
    - only-upgrade-chain-bin
    - fast-restart

- name: copy master genesis file
  when: inventory_hostname in groups[master_group]
  copy :
    src: "{{home_work_dir}}/nodes/node1/config/{{item}}"
    dest: "{{home_work_dir}}/{{item}}"
    remote_src: yes
  with_items:
    - genesis.json
  tags:
    - deploy
    - redeploy

- name: 从主节点下载genesis.json文件到控制节点
  when: inventory_hostname in groups[master_group]
  fetch:
    src: "{{ home_work_dir }}/genesis.json"
    dest: "/tmp/"
    flat: yes
  register: fetch_result
  tags:
    - deploy
    - redeploy

- name: 从控制节点复制genesis.json文件到从节点
  when: inventory_hostname in groups[slaves_group]
  copy:
    src: "/tmp/genesis.json"
    dest: "{{ home_work_dir }}/genesis.json"
  tags:
    - deploy
    - redeploy

- name: get master node id
  when: inventory_hostname in groups[master_group]
  shell: ./{{ common.chain_bin_name }} tendermint show-node-id --home {{home_work_dir}}/nodes/node1
  register: masterNodeIdResult
  args:
    chdir: "{{home_work_dir}}/bin"
  tags:
    - deploy
    - redeploy

- name: debug get master node id result
  debug:
    var: masterNodeIdResult
  tags:
    - deploy
    - redeploy

- name: save master node id to file
  when: inventory_hostname in groups[master_group]
  copy:
    content: "{{ masterNodeIdResult.stdout | b64decode }}"
    dest: "{{home_work_dir}}/nodeId.txt"
  tags:
    - deploy
    - redeploy

- name: 从主节点下载node id文件到控制节点
  when: inventory_hostname in groups[master_group]
  fetch:
    src: "{{ home_work_dir }}/nodeId.txt"
    dest: "/tmp/"
    flat: yes
  register: fetch_result
  tags:
    - deploy
    - redeploy

- name: 从控制节点复制node id文件到从节点
  when: inventory_hostname in groups[slaves_group]
  copy:
    src: "/tmp/nodeId.txt"
    dest: "{{ home_work_dir }}/nodeId.txt"
  tags:
    - deploy
    - redeploy

- name: retrieve master node id from file
  when: inventory_hostname in groups[slaves_group]
  slurp:
    src: "{{home_work_dir}}/nodeId.txt"
  register: master_node_id_result
  tags:
    - deploy
    - redeploy

- name: debug master_node_id_result
  debug:
    var: master_node_id_result
  tags:
    - deploy
    - redeploy

- name: deploy slaves
  shell: /bin/bash deploy.sh -t redeploy-slaves --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }} --master-node-id "{{ master_node_id_result.content }}" --master-node-ip "{{ master_node_host_ip }}"
  when: inventory_hostname in groups[slaves_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - deploy
    - redeploy

- name: start slaves
  shell: /bin/bash deploy.sh -t start-slaves --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }} --master-node-id "{{ master_node_id_result.content }}"
  when: inventory_hostname in groups[slaves_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - start
    - only-start-stopped-chain-node
    - fast-start

- name: restart slaves
  shell: /bin/bash deploy.sh -t restart-slaves --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }}
  when: inventory_hostname in groups[slaves_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - restart
    - only-upgrade-chain-bin
    - fast-restart

- name: query chain status
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: ps aux | grep {{ common.chain_bin_name }} | grep -v "grep"
  tags:
    - status

- name: kill chain
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: ps aux | grep {{ common.chain_bin_name }} | grep -v "grep" | awk '{print $2}' | xargs kill -9
  tags:
    - stop
    - kill

- name: copy get validator shell script file
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  copy:
    src: ../files/{{item}}
    dest: "{{home_work_dir}}"
  with_items:
    - get-validator-id.sh
  tags:
    - init-region
    - remove-region

- name: get all validator id, save them to tmp dir
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  shell: /bin/bash get-validator-id.sh --begin-pos {{ hostvars[inventory_hostname]['begin_pos'] }} --end-pos {{ hostvars[inventory_hostname]['end_pos'] }}
  register: adminAddrResult
  args:
    chdir: "{{home_work_dir}}/"
    executable: /bin/bash
  tags:
    - init-region
    - remove-region
    - gen-validator-id

- name: 下载目录/tmp/validator-pub-keys
  when: inventory_hostname in groups[master_group] or groups[slaves_group]
  synchronize:
    src: "/tmp/validator-pub-keys"
    dest: "/tmp/"
    mode: pull
  tags:
    - init-region
    - remove-region

- name: copy all /tmp/validator-pub-keys directory to master node
  when: inventory_hostname in groups[master_group]
  copy:
    src: /tmp/{{item}}
    dest: "{{home_work_dir}}/"
  with_items:
    - validator-pub-keys
  tags:
    - init-region
    - remove-region

- name: copy init region shell related script files
  when: inventory_hostname in groups[master_group]
  copy:
    src: ../files/{{item}}
    dest: "{{home_work_dir}}"
  with_items:
    - func.sh
    - common.sh
    - init_region.sh
  tags:
    - init-region
    - remove-region
    - do-exec-init-region
    - sync-init-region-sh

- name: execute init region operation
  shell: chmod +x init_region.sh && /bin/bash init_region.sh -t create --begin-pos {{ validator_begin_node_pos }} --end-pos {{ validator_end_node_pos }}
  when: inventory_hostname in groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - init-region
    - remove-region
    - do-exec-init-region

- name: test init region
  shell: curRegions={{regions[hostvars[inventory_hostname]['index']]['list']}} && echo "$curRegions"
  when: inventory_hostname in groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
  tags:
    - test

- name: remove chain logs
  shell: /bin/bash deploy.sh -t remove-logs
  when: inventory_hostname in groups[slaves_group] or groups[master_group]
  args:
    chdir: "{{home_work_dir}}"
    executable: /bin/bash
  tags:
    - remove-logs